/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Action =
  | {
      c: Panel;
      ty: "togglePanel";
    }
  | {
      ty: "toggleDebugPanel";
    }
  | {
      ty: "toggleUserPreferences";
    }
  | {
      c: ShiftPaneArgs;
      ty: "shiftPanel";
    }
  | {
      ty: "playPause";
    }
  | {
      ty: "reset";
    }
  | {
      ty: "rebuild";
    }
  | {
      ty: "toggleConsole";
    }
  | {
      c: Panel;
      ty: "focus";
    }
  | {
      ty: "closeDocument";
    }
  | {
      ty: "nextDocument";
    }
  | {
      ty: "previousDocument";
    }
  | {
      c: string;
      ty: "openDocument";
    }
  | {
      ty: "createNewProject";
    }
  | {
      ty: "createNewFile";
    }
  | {
      ty: "saveProjectToRemote";
    }
  | {
      ty: "saveCurrentFile";
    }
  | {
      ty: "saveAllFiles";
    }
  | {
      ty: "fork";
    }
  | {
      ty: "publish";
    }
  | {
      ty: "closeFile";
    }
  | {
      ty: "closeProject";
    };

export type Panel = "editorPanel" | "projectPanel" | "resourcePanel";

export interface ShiftPaneArgs {
  pane: Panel;
  shift: number;
}

export type PerformanceLevel = "Default" | "PowerSaver";

export interface Config {
  limitFps?: number;
  perfLevel?: PerformanceLevel | null;
}

export interface Credentials {
  password: string;
  usernameOrEmail: string;
}

export interface LoginResponse {
  userId: string;
}

export interface NewUser {
  email: string;
  password: string;
  username: string;
}

export interface NewUserResponse {
  id: string;
}

export type SupportedExtension = "wgsl" | "glsl" | "txt" | "md" | "json" | "csv" | "png" | "jpeg" | "mp3";

export type Binding =
  | {
      Builtin: Builtin;
    }
  | {
      Location: {
        interpolation?: Interpolation | null;
        location: number;
        sampling?: Sampling | null;
      };
    };

export type Builtin =
  | (
      | "ViewIndex"
      | "BaseInstance"
      | "BaseVertex"
      | "ClipDistance"
      | "CullDistance"
      | "InstanceIndex"
      | "PointSize"
      | "VertexIndex"
      | "FragDepth"
      | "FrontFacing"
      | "PrimitiveIndex"
      | "SampleIndex"
      | "SampleMask"
      | "GlobalInvocationId"
      | "LocalInvocationId"
      | "LocalInvocationIndex"
      | "WorkGroupId"
      | "WorkGroupSize"
      | "NumWorkGroups"
    )
  | {
      Position: {
        invariant: boolean;
      };
    };

export type Interpolation = "Perspective" | "Linear" | "Flat";

export type Sampling = "Center" | "Centroid" | "Sample";

export type ShaderStage = "Vertex" | "Fragment" | "Compute";

export type TypeInner =
  | {
      Scalar: {
        kind: ScalarKind;
        width: number;
      };
    }
  | {
      Vector: {
        kind: ScalarKind;
        size: VectorSize;
        width: number;
      };
    }
  | {
      Matrix: {
        colums: VectorSize;
        rows: VectorSize;
        width: number;
      };
    }
  | {
      Atomic: {
        kind: ScalarKind;
        width: number;
      };
    }
  | {
      Pointer: {
        base: number;
        space: AddressSpace;
      };
    }
  | {
      ValuePointer: {
        kind: ScalarKind;
        size?: VectorSize | null;
        space: AddressSpace;
        width: number;
      };
    }
  | {
      Array: {
        base: number;
        size: ArraySize;
        stride: number;
      };
    }
  | {
      Struct: {
        members: StructMember[];
        span: number;
      };
    }
  | {
      Image: {
        arrayed: boolean;
        class: ImageClass;
        dim: ImageDimension;
      };
    }
  | {
      Sampler: {
        comparison: boolean;
      };
    }
  | {
      BindingArray: {
        base: number;
        size: ArraySize;
      };
    };

export type ScalarKind = "Sint" | "Uint" | "Float" | "Bool";

export type VectorSize = "Bi" | "Tri" | "Quad";

export type AddressSpace =
  | ("Function" | "Private" | "WorkGroup" | "Uniform" | "Handle" | "PushConstant")
  | {
      Storage: {
        access: number;
      };
    };

export type ArraySize =
  | "Dynamic"
  | {
      Constant: number;
    };

export type ImageClass =
  | {
      Sampled: {
        kind: ScalarKind;
        multi: boolean;
      };
    }
  | {
      Depth: {
        multi: boolean;
      };
    }
  | {
      Storage: {
        access: number;
        format: StorageFormat;
      };
    };

export type StorageFormat =
  | "R8Unorm"
  | "R8Snorm"
  | "R8Uint"
  | "R8Sint"
  | "R16Uint"
  | "R16Sint"
  | "R16Float"
  | "Rg8Unorm"
  | "Rg8Snorm"
  | "Rg8Uint"
  | "Rg8Sint"
  | "R32Uint"
  | "R32Sint"
  | "R32Float"
  | "Rg16Uint"
  | "Rg16Sint"
  | "Rg16Float"
  | "Rgba8Unorm"
  | "Rgba8Snorm"
  | "Rgba8Uint"
  | "Rgba8Sint"
  | "Rgb10a2Unorm"
  | "Rg11b10Float"
  | "Rg32Uint"
  | "Rg32Sint"
  | "Rg32Float"
  | "Rgba16Uint"
  | "Rgba16Sint"
  | "Rgba16Float"
  | "Rgba32Uint"
  | "Rgba32Sint"
  | "Rgba32Float";

export type ImageDimension = "D1" | "D2" | "D3" | "Cube";

export interface PrebuildResult {
  dependencyInfo: DependencyInfo;
  fileBuilds: {
    [k: string]: FilePrebuildResult;
  };
}

export interface DependencyInfo {
  deps: {
    [k: string]: FileDependencyInfo;
  };
}

export interface FileDependencyInfo {
  errors?: CompileError[] | null;
  exxports: {
    [k: string]: Match;
  };
  imports: Match[];
}

export interface CompileError {
  message: string;
  span?: SourceLocation | null;
}

export interface SourceLocation {
  /**
   * Length in code units (in bytes) of the span.
   */
  length: number;
  /**
   * 1-based line number.
   */
  lineNumber: number;
  /**
   * 1-based column of the start of this span
   */
  linePosition: number;
  /**
   * 0-based Offset in code units (in bytes) of the start of the span.
   */
  offset: number;
}
/**
 * Identical to regex::Match, except the text is owned and it can be serialized. TODO: get refs to work within the compiler instead of owned strings.
 */

export interface Match {
  end: number;
  start: number;
  text: string;
}

export interface FilePrebuildResult {
  errors?: CompileError[] | null;
  processedShader: File;
  rawModule?: Module | null;
}
/**
 * Encapsulates all data needed to emulate a file in gputoy virtual directory structure.
 */

export interface File {
  /**
   * Contents of file in plain text
   */
  data: string;
  /**
   * File path starting at / (project root)
   */
  dir: string;
  /**
   * File extension
   */
  extension: SupportedExtension;
  /**
   * Fetch url. If exists, then contents will be fetched from remote URL on project load
   */
  fetch?: string | null;
  /**
   * Name of file
   */
  fileName: string;
}

export interface Module {
  entry_points: EntryPoint[];
  functions: Function[];
  types: Type[];
}

export interface EntryPoint {
  function: Function;
  name: string;
  stage: ShaderStage;
  /**
   * @minItems 3
   * @maxItems 3
   */
  workgroup_size: [number, number, number];
}

export interface Function {
  arguments: FunctionArgument[];
  name?: string | null;
  result?: FunctionResult | null;
}

export interface FunctionArgument {
  binding?: Binding | null;
  name?: string | null;
  ty: number;
}

export interface FunctionResult {
  binding?: Binding | null;
  ty: number;
}

export interface Type {
  inner: TypeInner;
  name?: string | null;
}

export interface StructMember {
  binding?: Binding | null;
  name?: string | null;
  offset: number;
  ty: number;
}

export interface Project {
  config?: Config | null;
  files: Files;
  layout?: Layout | null;
}

export interface Config {
  limitFps?: number;
  perfLevel?: PerformanceLevel | null;
}
/**
 * Gputoy virtual directory. Each file in the map has its path from root as key, including file name and extension
 *
 * example: ```ts map: { "shaders/main.wgsl": { "data": "...", "dir": "shaders/", "fileName": "main", "extension": "wgsl", } } ```
 */

export interface Files {
  map: {
    [k: string]: File;
  };
}
/**
 * Encapsulates all data needed to emulate a file in gputoy virtual directory structure.
 */

export interface Layout {
  /**
   * State of project panel accordians
   */
  accordianOpen: {
    [k: string]: boolean;
  };
  /**
   * Panel settings for editorPanel
   */
  editorPanel: PanelState;
  /**
   * Currently opened file index within workspace
   */
  fileIndex?: number | null;
  /**
   * State of file tree
   */
  fileTreeState: {
    [k: string]: DirNodeState;
  };
  /**
   * Is the left side status panel open
   */
  isStatusOpen: boolean;
  /**
   * Panel settings for projectPanel
   */
  projectPanel: PanelState;
  /**
   * Panel settings for resourcePanel
   */
  resourcePanel: PanelState;
  /**
   * List of file identifiers which is open in workspace. Order of identifiers in vec is the order it is listed in the editor.
   */
  workspace: string[];
}

export interface PanelState {
  show: boolean;
  size: number;
}

export interface DirNodeState {
  isRenaming: boolean;
  open: boolean;
}

export interface ProjectResponse {
  authorId?: string | null;
  config?: Config | null;
  createdAt: string;
  description?: string | null;
  files: Files;
  forkedFromId?: string | null;
  id: string;
  layout?: Layout | null;
  published: boolean;
  title: string;
  updatedAt: string;
}

export interface ProjectUpsert {
  config?: Config | null;
  description?: string | null;
  files: Files;
  id?: string | null;
  layout?: Layout | null;
  published: boolean;
  title: string;
}

export type LineNumberPrefs = "on" | "interval" | "relative" | "off";

export interface UpdateUserInfoArgs {
  bio?: string | null;
  config?: UserPrefs | null;
  fullName?: string | null;
  image?: string | null;
}

export interface UserPrefs {
  editor: UserEditorPrefs;
  general: UserGeneralPrefs;
  keybinds: {
    [k: string]: FilteredAction;
  };
  theme: {
    [k: string]: string;
  };
}

export interface UserEditorPrefs {
  fontFamily?: string | null;
  fontSize?: number | null;
  lineNumbers: LineNumberPrefs;
  minimap: boolean;
  vimMode: boolean;
}

export interface UserGeneralPrefs {
  editorPanelSize: number;
  projectPanelSize: number;
  resourcePanelSize: number;
}

export interface FilteredAction {
  action: Action;
  condition?: string | null;
}

export interface UserInfoResponse {
  active: boolean;
  bio?: string | null;
  config?: UserPrefs | null;
  createdAt: string;
  email: string;
  emailVerified: boolean;
  fullName?: string | null;
  id: string;
  image?: string | null;
  updatedAt: string;
  username: string;
}